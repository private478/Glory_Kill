

class PB_WeaponBase : DoomWeapon
{
	double exaggerationMultiplier;
	Actor laseractor;
	Actor InvActor;
	Vector3 invactorpos;
	Statelabel UnloadedState;
	property UnloadedState: UnloadedState;
	string UnloaderToken;
	property UnloaderToken: UnloaderToken;
	int integer;
	string MidWeaponPickupMessage;
	property MidPickupMessage: MidWeaponPickupMessage;
	string lastGrenadeType;
	property lastGrenadeType: lastGrenadeType;
	
	string respectInventoryItem;
	property respectItem: respectInventoryItem;
	
	string rocketLauncherMode;
	property rocketLauncherMode: rocketLauncherMode;
	
	string upgradedRifleMode;
	property upgradedRifleMode: upgradedRifleMode;
	string fireMode;
	property fireMode: fireMode;
	bool akimboMode;
	property akimboMode: akimboMode;
	
	bool FiringLeftWeapon;
	bool FiringRightWeapon;
	property FiringLeftWeapon: FiringLeftWeapon;
	property FiringRightWeapon: FiringRightWeapon;
	
	
	bool usingEquipment;
	property usingEquipment: usingEquipment;
	
	bool usingMelee;
	property usingMelee: usingMelee;
	
	bool usingKick;
	property usingKick: usingKick;
	
	bool executingEnemy;
	property executingEnemy: executingEnemy;
	
	double horizontalOffsetRecoil;
	property OffsetRecoilX: horizontalOffsetRecoil;

	double verticalOffsetRecoil;
	property OffsetRecoilY: verticalOffsetRecoil;
	
	bool chainsawMode;
	property chainsawMode: chainsawMode;
	
	//Cemtex's PB_AmmoIntoMag function variables
	string AmmoMag;
	string AmmoPool;
	int MagazineMaxFill;
	int TakeGiveResrvAmnt; //So no states would be made for weapons that take more than one of their desired reserve ammo

	Default
	{
		Weapon.BobRangeX 0.3;
		Weapon.BobRangeY 0.5;
		Weapon.BobSpeed 2.4;
		Weapon.BobStyle "InverseSmooth";
		PB_WeaponBase.UnloaderToken "HasUnloaded";
		+DONTGIB
	}
	
	States
	{
		Select:
		TNT1 A 1 A_Raise;
		Wait;

		Fire:
		Ready:
		SelectAnimation:
			Goto GoingToReady;
		Deselect:
			TNT1 A 1 A_Lower;
			Wait;
		
		InsertBullets_Zscript:
			TNT1 A 0 A_JumpifInventory(invoker.AmmoMag,invoker.MagazineMaxFill,"InsertBullets_Zscript_Stop");
			TNT1 A 0 A_JumpIf(!CountInv(invoker.AmmoPool),"InsertBullets_Zscript_Stop");
			TNT1 A 0 
				{
					A_GiveInventory(invoker.AmmoMag,1);
					A_TakeInventory(invoker.AmmoPool,invoker.TakeGiveResrvAmnt);
				}
			Loop;
		
		RemoveBullets_ZScript:
			TNT1 A 0 A_JumpifInventory(invoker.AmmoMag,1,1);
			Goto InsertBullets_Zscript_Stop;
			TNT1 A 0 
				{
					A_TakeInventory(invoker.AmmoMag,1);
					A_GiveInventory(invoker.AmmoPool,invoker.TakeGiveResrvAmnt);
				}
			Loop;

		InsertBullets_Zscript_Stop:	
			TNT1 A 1;
			Stop;
			
		HelmetAnimation:
			TNT1 A 0
			{
				A_GiveInventory("PowerInvulnerable2",1);
				A_GiveInventory("sae_extcam", 1);
				A_GiveInventory("sae_deathcam", 1);
				A_SetCrosshair(5);
			}
			H3L6 H 1 A_SetBlend("00 00 00", 1, 35, "00 00 00", 0);
			TNT1 A 34 A_StartSound("IronSights",CHAN_AUTO);
			H3L1 ABCDE 1 A_SetRoll(roll+10, SPF_INTERPOLATE);
			TNT1 A 0 A_StartSound("RSUP1",CHAN_AUTO);
			H3L1 FGHIJK 1 A_SetRoll(roll+5, SPF_INTERPOLATE);
			H3L1 LMNOP 1 A_SetRoll(roll-3, SPF_INTERPOLATE);
			//add sound for hand grabbing other side
			H3L1 QRSTUVWXYZ 1;
			H3L2 ABCD 1;
			H3L2 E 1 A_StartSound("IronSights",CHAN_AUTO);
			H3L2 FGHIJKLMNOPQRSTUVWXYZ 1 A_SetRoll(roll-3, SPF_INTERPOLATE);
			H3L3 ABCD 1;
			H3L3 E 1 A_StartSound("IronSights",CHAN_AUTO);
			H3L3 FGHIJ 1 A_SetRoll(roll-1.5, SPF_INTERPOLATE);
			H3L3 JKLMN 1 A_SetRoll(roll+1.5, SPF_INTERPOLATE);
			H3L3 OPQRS 1 A_SetRoll(roll+3, SPF_INTERPOLATE);
			H3L3 TUVWXYZ 1 A_SetRoll(roll+3, SPF_INTERPOLATE);
			H3L4 ABC 1 A_SetRoll(roll+3, SPF_INTERPOLATE);
			H3L4 DEFGH 1 A_SetRoll(roll+3.5, SPF_INTERPOLATE);
			H3L4 I 1
			{
				A_StartSound("helmet/swipe");
				A_SetRoll(roll+2.5, SPF_INTERPOLATE);
			}
			H3L4 JKLMNOP 1 A_SetRoll(roll+2.5, SPF_INTERPOLATE);
			H3L4 Q 1
			{
				A_StartSound("helmet/swipe");
				A_SetRoll(roll+2, SPF_INTERPOLATE);
			}
			H3L4 RSTUVWXYZ 1 A_SetRoll(roll+2, SPF_INTERPOLATE);
			H3L5 ABC 1 A_SetRoll(roll+3, SPF_INTERPOLATE);
			H3L5 DEF 1 A_SetRoll(roll+4, SPF_INTERPOLATE);
			H3L5 GH 1 A_SetRoll(roll+5, SPF_INTERPOLATE);
			H3L5 I 1
			{
				A_StartSound("RSUP2",CHAN_AUTO);
				A_SetRoll(roll+5, SPF_INTERPOLATE);
			}
			H3L5 JKL 1 A_SetRoll(roll+2.5, SPF_INTERPOLATE);
			H3L5 MNO 1 A_SetRoll(roll+1, SPF_INTERPOLATE);
			H3L5 P 1 A_StartSound("marine/superfist6",CHAN_AUTO);
			H3L5 QRS 1;
			H3L5 T 8;
			H3L5 UVXYZ 1;
			TNT1 A 0 A_SetBlend("00 00 00", 0, 8, "00 00 00", 1);
			H3L6 A 1
			{
				A_StartSound("HLMTPUT",CHAN_AUTO);
				A_SetRoll(roll+(frandom(-2,2)), SPF_INTERPOLATE);
			}
			H3L6 BCDEF 1 A_SetRoll(roll+(frandom(-2,2)), SPF_INTERPOLATE);
			H3L6 G 1
			{
				A_StartSound("HLMTBEP",CHAN_AUTO);
				A_SetRoll(roll+(frandom(-2,2)), SPF_INTERPOLATE);
			}
			H3L6 H 8 A_SetBlend("00 00 00", 1, 10, "51 92 99", 1);
			TNT1 A 1 A_StartSound("HLMTBPP",CHAN_AUTO);
			TNT1 A 20 A_SetBlend("51 92 99", 1, 20, "51 92 99", 0);
			TNT1 A 0
			{
				A_TakeInventory("PowerInvulnerable2",1);
				A_TakeInventory("sae_extcam", 1);
				A_TakeInventory("sae_deathcam", 1);
				A_TakeInventory("CantDoAction",1);
			}
			TNT1 A 0 A_Raise(9999);
			TNT1 A 0 A_Jump(256,"SelectAnimation");
			Goto Ready3;
		WeaponRespect:
		Ready3:
			TNT1 A 1 A_Jump(255, "Ready3");
			Loop;	
		
		Flash:
			TNT1 A 1;
			Stop;
			
		StainedLedgeClimb:
			3L1M A 0 A_JumpIfInventory("PowerGreenBloodOnVisor",1,4);
			2L1M A 0 A_JumpIfInventory("PowerBlueBloodOnVisor",1,3);
			1L1M A 0 A_JumpIfInventory("PowerBloodOnVisor",1,2);
		LedgeClimb:
			CL1M A 0;
			"####" A 0 {
				A_StopSound(1);
				A_StopSound(5);
				A_StopSound(6);
				A_StopSound(7);
				A_TakeInventory("CantDoAction",1);
				A_TakeInventory("PowerInvulnerable2",1);
				A_OverlayFlags(1,PSPF_PLAYERTRANSLATED, false);
				A_ClearOverlays(-80, 80);
				A_Stop();
				A_ZoomFactor(1.0);
				A_GunFlash("LedgeGrabFlash");
				A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
				SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
				A_StartSound("ledgeclimb",5);
			}
			"####" ABC 1 {
				let plr = PlayerPawnBase(self);
				
				if(Pos.Z < (plr.LedgeHeight - Height * 0.78f))
				{
					A_SetPitch(pitch-pitch/2, SPF_INTERPOLATE);
					Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
					//plr.velz--;
				}
				else if(Pos.Z < (plr.LedgeHeight - Height * 0.76f))
				{
					LedgeReach(0.751);
					return ResolveState("LedgeReach");
				}
				return ResolveState(null);
			}
		LedgeReach:
		    "####" A 0 A_ClearOverlays(-80,80);
			"####" A 0 A_OverlayFlags(1,PSPF_PLAYERTRANSLATED, false);
			"####" D 1 {
				let plr = PlayerPawnBase(self);
				//if(Pos.Z >= (plr.LedgeHeight - Height * 0.78f) && Pos.Z < (plr.LedgeHeight - Height * 0.76f))
				if(Pos.Z >= (plr.LedgeHeight - Height * 0.78f))
				{
					A_SetPitch(pitch-pitch/2, SPF_INTERPOLATE);
					SetInventory("Grabbing_A_Ledge",1); //SetInventory fixes the looping ledge grab bug when sv_unlimited_pickup 1 is on
					LedgeReach(0.751);
				}
				else if(Pos.Z < (plr.LedgeHeight - Height * 0.78f))
				{
					Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
				}
			}
			"####" A 0 A_JumpIf(CountInv("Grabbing_A_Ledge")==1, 1);
			Goto LedgeReach;
			
			"####" E 1 {
			    A_ClearOverlays(-80,80);
				let plr = PlayerPawnBase(self);
				plr.velz = 3.6;
				A_SetPitch(0, SPF_INTERPOLATE);
				LedgeReach(0.751);
				A_StopSound(CHAN_WEAPON);
				plr.LedgeAngle = Angle;
				plr.LedgeCheck = False;
				plr.LedgeGrabbed = True;
			}
			"####" F 1 {
				A_SetPitch(pitch-0.5, SPF_INTERPOLATE);
				Vel = Vel.Length() ? (0, 0, 0.62) : (0, 0, 0);
			}
			"####" G 1 {
				let plr = PlayerPawnBase(self);
				A_SetPitch(pitch+3, SPF_INTERPOLATE);
				Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
			}
			"####" HI 1 {
				let plr = PlayerPawnBase(self);
				A_SetPitch(pitch+4, SPF_INTERPOLATE);
				plr.velz += 0.5;
				
				Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
			}
		FinishClimb:
			3L1M A 0 A_JumpIfInventory("PowerGreenBloodOnVisor",1,4);
			2L1M A 0 A_JumpIfInventory("PowerBlueBloodOnVisor",1,3);
			1L1M A 0 A_JumpIfInventory("PowerBloodOnVisor",1,2);
			CL1M A 0;
			"####" A 0 {
			    A_ClearOverlays(-80,80);
				A_OverlayFlags(1,PSPF_PLAYERTRANSLATED, false);				
				A_GunFlash("LedgeGrabFlash");
			}
			"####" JK 1 {
				let plr = PlayerPawnBase(self);
				plr.velz = 3.6;
				A_SetPitch(pitch-3, SPF_INTERPOLATE);
				Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
			}
			"####" LM 1 A_SetPitch(pitch-2, SPF_INTERPOLATE);
			TNT1 AA 1 {
				A_SetPitch(pitch-pitch/2, SPF_INTERPOLATE);
				A_WeaponReady();
			}
			//TNT1 A 0 A_Overlay(-10, "FirstPersonLegsStand");
			// New, and to prevent an issue with melee not working after climbing during it's animation
			TNT1 A 0 {
				PB_SetUsingKick(false);
				PB_SetUsingMelee(false);
				PB_SetUsingEquipment(false);
				PB_SetExecutingEnemy(false);
				A_SetPitch(0, SPF_INTERPOLATE);
				SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
			 	SetInventory("Grabbing_A_Ledge", 0);
			}
			TNT1 A 0 A_Jump(256,"SelectAnimation");
			Goto Ready3;
		Equipment_Toggle_Handler_Overlay:
			TNT1 A 1 {
			
			if (CountInv("ToggleEquipment")==1) 
				return ResolveState("SwitchEquipment");
			return ResolveState(null);
			}
			Loop;
		Melee_Equipment_Handler_Overlay:
			TNT1 A 1 {
				
				if(JustPressed(BT_USER1) && !PB_usingMelee() && !PB_executingEnemy() && !PB_usingEquipment() &&
				!CheckInventory("GoFatality",1) && !CheckInventory("CantDoAction",1)) 
				{
					A_OverlayOffset(PSP_WEAPON, 0, 32);
					PB_SetUsingEquipment(true);
					A_Overlay(PSP_WEAPON, "UseEquipment");
					A_OverlayOffset(PSP_WEAPON, 0, 32);
				}
			
				if(JustPressed(BT_USER2) && !PB_usingMelee() && !PB_executingEnemy() && !PB_usingEquipment() && !CheckInventory("Zoomed", 1)
				&& !CheckInventory("GoFatality",1) && !CheckInventory("CantDoAction",1)) 
				{
					A_OverlayOffset(PSP_WEAPON, 0, 32);
					PB_SetUsingMelee(true);
					A_Overlay(PSP_WEAPON, "QuickMelee");
					A_OverlayOffset(PSP_WEAPON, 0, 32);
				}
			}
			Loop;
		KickHandler_Overlay:
			TNT1 A 1 {
				if(JustPressed(BT_USER4) && !PB_usingKick() && !PB_executingEnemy() && !CheckInventory("Zoomed", 1) && PB_MeleeAttackKickCheck() &&
				!CheckInventory("GoFatality",1)) 
				{
					PB_SetUsingKick(true);
					A_OverlayOffset(-999, 0, 32);
					A_Overlay(-999, "DoKick");
					A_OverlayFlags(-999,PSPF_PLAYERTRANSLATED, true);
				}
			}
			Loop;
		// Initialize Weapon upon selection
		GoingToReady:
			TNT1 A 0 A_JumpIfInventory ("HasBarrel", 1, "ReadyBarrel");
			TNT1 A 0 A_JumpIfInventory ("HasFlameBarrel", 1, "ReadyFlameBarrel");
			TNT1 A 0 A_JumpIfInventory ("HasIceBarrel", 1, "ReadyIceBarrel");
		SelectingAnimation:
			TNT1 A 0 {
				A_TakeInventory("KeepLaserDeactivated",1);
				A_TakeInventory("DoGrenade",1);
				A_TakeInventory("IsRunning",1);
				A_TakeInventory("Reloading",1);
				A_Overlay(-10, "FirstPersonLegsStand");
				
				// New 
				PB_SetUsingKick(false);
				PB_SetUsingMelee(false);
				PB_SetUsingEquipment(false);
				PB_SetExecutingEnemy(false);
				A_ClearReFire(); //Prevents altfire hold glitches
				
			}
			TNT1 A 0 A_Jump(255,"Ready4");
			TNT1 AAAA 1 A_Jump(255, "Ready3");
			Loop;
		SelectFirstPersonLegs:
			TNT1 A 0 {
				A_StopSound(1);
				A_StopSound(CHAN_VOICE);
				A_StopSound(5);
				A_StopSound(6);
				A_StopSound(7);
				A_StopSOund(CHAN_AUTO);
				A_TakeInventory("Spin",1);
				A_TakeInventory("CantWeaponSpecial",1); //Fixes bug with Weapon Special Key no longer working when changing SGL grenade type or RL missile mode
				A_TakeInventory("MG42Selected",1); //Take this token on every weapon that's not the MG42.
				A_SetInventory("Grabbing_A_Ledge", 0); //Fixed bug where movement is locked when vaulting after entering a level
				A_Takeinventory("RandomHeadExploder",1);
				A_TakeInventory("DualFireReload",2);
				A_Overlay(-777, "Melee_Equipment_Handler_Overlay");
				A_Overlay(-778, "KickHandler_Overlay");
				A_Overlay(-779, "Equipment_Toggle_Handler_Overlay");
				A_Overlay(-10, "FirstPersonLegsStand");
			}
			TNT1 A 0 A_Jump(255, "SelectContinue");
			Loop;
		TryToSelectDrum:
			TNT1 AAAA 1 A_Jump(255, "Ready3");
			TNT1 AAAA 1 A_Jump(255, "BeltReady");
			Loop;
		GoingToReady2:
			TNT1 A 0 {
				A_TakeInventory("KeepLaserDeactivated",1);
				A_TakeInventory("ToggleEquipment",1);
				PB_SetUsingMelee(false);
				PB_SetUsingEquipment(false);
				A_Overlay(-10, "FirstPersonLegsStand");
				A_ClearReFire();
			}
			TNT1 A 0 A_JumpIfInventory("SawSelected", 1, "OnLoop");
			TNT1 AAAA 0 A_Jump(256, "SelectAnimation");
			TNT1 AAAA 1 A_Jump(256, "Ready");
			Loop;
			
		Steady:
			TNT1 A 1 {
				// New 
				PB_SetUsingKick(false);
				PB_SetUsingMelee(false);
				PB_SetUsingEquipment(false);
				PB_SetExecutingEnemy(false);
			}
			Goto GoingToReady;
		FirstPersonLegsKickRight:
			STAN A 0;
			"####" A 0 A_GiveInventory("KeepLaserDeactivated",1);
			"####" A 0 A_JumpIf(Height < 54, "FirstPersonLegsHide");
			"####" A 0 A_JumpIfInventory("FPSLegChecker", 1, 2);
			"####" O 1
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Loop;
			"####" P 1
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Loop;
		FirstPersonLegsKickLeft:
			STAL A 0;
			"####" A 0 A_GiveInventory("KeepLaserDeactivated",1);
			"####" A 0 A_JumpIf(Height < 54, "FirstPersonLegsHide");
			"####" A 0 A_JumpIfInventory("FPSLegChecker", 1, 2);
			"####" P 1
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Loop;
			"####" O 1
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Loop;
		FirstPersonLegsHide:
			"####" Q 1 
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Loop;
		FirstPersonLegsStand:
			TNT1 A 0 A_JumpIf(vel.x > 0.8 || vel.x < -0.8 || vel.y > 0.8 || vel.y < -0.8, "FirstPersonLegsWalk1");
			TNT1 A 0 A_JumpIf(vel.z != 0, "FirstPersonLegsJump");
			TNT1 A 0 A_JumpIf(Height < 54, "FirstPersonLegsCrouch");
			TNT1 A 0 A_JumpIfInventory("FPSLegChecker", 1, 2);
			STAN A 1 
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Loop;
			TNT1 A 0 A_JumpIf(Height < 54, "FirstPersonLegsCrouch");
			TNT1 A 0 A_JumpIf(vel.z != 0, "FirstPersonLegsJump");
			STAN M 1 
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Loop;
		FirstPersonLegsCrouch:
			TNT1 A 0 A_StartSound("IronSights", 0); //Sound when player crouches
		FirstPersonLegsCrouchContinue:
			TNT1 A 0 A_JumpIf(vel.z != 0, "FirstPersonLegsJump");
			TNT1 A 0 A_JumpIf(vel.x > 0.8 || vel.x < -0.8 || vel.y > 0.8 || vel.y < -0.8, "FirstPersonLegsWalk1");
			TNT1 A 0 A_JumpIf(Height > 54, "FirstPersonLegsStand");
			STAN N 1 
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Loop;
		FirstPersonLegsWalk1:
			TNT1 A 0 A_JumpIf(vel.z != 0, "FirstPersonLegsJump");
			TNT1 A 0 A_JumpIfInventory("FPSLegChecker", 1, "FirstPersonLegsWalk2");
			TNT1 A 0 A_JumpIf(vel.z != 0, "FirstPersonLegsJump");
			TNT1 A 0 A_GiveInventory("FPSLegChecker",1);
			STAN BCCDDEEFF 1
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
				return A_JumpIf(vel.z != 0, "FirstPersonLegsJump");
			}
			Goto FirstPersonLegsStand;
		FirstPersonLegsWalk2:
			TNT1 A 0 A_JumpIf(vel.z != 0, "FirstPersonLegsJump");
			TNT1 A 0 A_TakeInventory("FPSLegChecker",1);
			STAN GHHIIJJKLL 1 
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
				return A_JumpIf(vel.z != 0, "FirstPersonLegsJump");
			}
			Goto FirstPersonLegsStand;
		FirstPersonLegsJump:
			STAN I 5
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Goto FirstPersonLegsStand;

		
		Steady:
			TNT1 A 1 A_JumpIfInventory("GoFatality",1,"Steady");
			Goto GoingToReady;
			
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Glory Kill
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			
		DoFatality:
			TNT1 A 0 A_JumpIfInventory("GoFatality",1,"DoingFatality");
			TNT1 A 0 A_Takeinventory("Fear",1);
			TNT1 A 0
			{
				if(GetCvar("be_Protection") == 1)
				{
					A_Giveinventory("Superarmor",1);
				}
			}
			"####" "#" 0 { return ResolveState("Steady"); }
			
		DoingFatality:
			TNT1 A 1 SetPlayerProperty(0,1,0);
			TNT1 A 0
			{
				if(GetCvar("be_Protection") == 1)
				{
					A_Giveinventory("Superarmor",1);
				}
			}
			TNT1 A 0 {PB_SetUsingMelee(false);}
			"####" "#" 0 { return ResolveState("DoFatality"); }
			
		PermormGloryKill:
			TNT1 A 0
			{
				A_StartSound("GloryKill", CHAN_UI);
				if(GetCvar("be_Protection") == 1)
				{
					A_Giveinventory("Superarmor",1);
				}
				if(GetCvar("be_Fear") == 1)
				{
					A_Giveinventory("Fear",1);
				}
			}
			TNT1 A 0 {PB_SetUsingMelee(false);}
			TNT1 A 0 A_CustomPunch(10000,1,0,"GloryKillPuff",150,0,0);
			TNT1 A 0;
			"####" "#" 0 { return ResolveState("DoFatality"); }
		
		/////////////////////////////////////////////////////////////////////////////////////////////
		// Glory Melee
		////////////////////////////////////////////////////////////////////////////////////////////
		
		GloryMelee:
			SAWG G 0
			{	
				if(CountInv("CrucibleEnergy") > 0)
				{
					A_TakeInventory("Zoomed",1);
					A_ZoomFactor(1.0);
					A_TakeInventory("ADSmode",1);
					A_StopSound(1);
					A_StopSound(6);
					return ResolveState("Crucible");
				}
					A_Print("Not Enough Energy");
					A_StartSound("Beep");
					A_TakeInventory("DoGloryMelee",1);
					return ResolveState(null);
			}
			Goto GoingToReady;
			
		
		/////////////////////////////////////////////////////////////////////////////////////////////
		// Blood Punch
		////////////////////////////////////////////////////////////////////////////////////////////
		
		BloodPunch:
			SCL0 A 0 A_ClearOverlays(-5, 80);
			SCL0 A 0 A_GunFlash("Null");
			SCL0 A 0 A_StopSound(1);
			SCL0 A 0 A_StopSound(6);
			P1NK ABCD 1 {
				if (CountInv("PowerBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P2NK");}
				if (CountInv("PowerBlueBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P3NK");}
				if (CountInv("PowerGreenBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P4NK");}
				A_SetRoll(roll+2);
			}
			TNT1 A 1 A_SetRoll(roll+2);
			TNT1 A 2;
			TNT1 A 0 A_StartSound("weapons/ultrwhoosh", 5);
			P1NK EF 1 {
				if (CountInv("PowerBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P2NK");}
				if (CountInv("PowerBlueBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P3NK");}
				if (CountInv("PowerGreenBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P4NK");}
				A_SetRoll(roll-2);
			}
			TNT1 A 0 {
					A_Saw("", "player/cyborg/fist", 120, "BloodPunchPuff", SF_NOPULLIN | SF_NOTURN , 128);
			}
			P1NK G 1 {
				if (CountInv("PowerBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P2NK");}
				if (CountInv("PowerBlueBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P3NK");}
				if (CountInv("PowerGreenBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P4NK");}
			}
			P1NK HIJKLMNO 1 {
				if (CountInv("PowerBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P2NK");}
				if (CountInv("PowerBlueBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P3NK");}
				if (CountInv("PowerGreenBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P4NK");}
				A_SetRoll(roll-1);
				}
			P1NK O 1 {
				if (CountInv("PowerBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P2NK");}
				if (CountInv("PowerBlueBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P3NK");}
				if (CountInv("PowerGreenBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P4NK");}
			}
			P1NK PQ 1 {
				if (CountInv("PowerBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P2NK");}
				if (CountInv("PowerBlueBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P3NK");}
				if (CountInv("PowerGreenBloodOnVisor") >= 1 ) { A_SetWeaponSprite("P4NK");}
				A_SetRoll(roll+2);
			}
			TNT1 A 0 A_SetRoll(0);
			TNT1 A 0 {
				if(CountInv("BloodPunchKilled"))
				{
					A_StartSound("BloodPunch", CHAN_AUTO);
					A_TakeInventory("BloodPunchKilled");
					A_TakeInventory("BPtoken");
					A_Explode(125, 200, 0, true, 200 ,0 ,0, "BPImpactPuff", "BloodPunch");
				}
			}
			TNT1 A 0 {PB_SetUsingMelee(false);}
			TNT1 A 0 A_TakeInventory("DoGloryMelee", 1);
			TNT1 A 1 A_Raise;
			Goto GoingToReady;
		
		
		/////////////////////////////////////////////////////////////////////////////////////////////
		// Crucible
		////////////////////////////////////////////////////////////////////////////////////////////
			
		Crucible:
			SCL0 A 0 A_ClearOverlays(-5, 80);
			SCL0 A 0 A_GunFlash("Null");
			CRCB A 1 A_StartSound("Crucible_Select", CHAN_WEAPON, CHANF_OVERLAP);
			CRCB AABBCCJJ 2 bright A_WeaponOffset(-1, 2, WOF_ADD);
			CRCB D 1 bright
			{
				A_StartSound("Crucible_Deploy", CHAN_WEAPON, CHANF_OVERLAP);
				A_WeaponOffset(-2, 4, WOF_ADD);
				A_TakeInventory("CrucibleEnergy",1);
			}
			CRCB D 3 bright A_WeaponOffset(-2, 4, WOF_ADD);//-10, 20
			CRCB DDD 1 bright A_WeaponOffset(3, -6, WOF_ADD);
			CRCB D 1 bright A_WeaponOffset(0.5, 4, WOF_ADD);
			Goto HoldCrucible;
			
		HoldCrucible:	
			CRCB D 1 bright A_StartSound("Crucible_Idle",10,CHANF_LOOP|CHANF_OVERLAP,0.2);
			CRCB D 1 bright
			{
				A_WeaponReady();
				if (!countinv("DoGloryMelee"))
				{
					return ResolveState("DoCrucible");
				}
				return ResolveState(null);
			}
			Goto HoldCrucible+1;
			
		DoCrucible:
			CRCB D 1 
			{
				A_StartSound("Crucible_Swing", CHAN_WEAPON, CHANF_OVERLAP);
				A_WeaponOffset(10,2, WOF_ADD);
			}
			CRCB D 1 A_WeaponOffset(20, 4, WOF_ADD);
			CRCB D 1 A_WeaponOffset(30, 6, WOF_ADD);
			CRCB D 1 A_WeaponOffset(40, 8, WOF_ADD);
			CRCB D 1 A_WeaponOffset(50,10, WOF_ADD);
			CRCB D 1 A_WeaponOffset(60,12, WOF_ADD);
			TNT1 A 0 A_WeaponReady(WRF_NoFire|WRF_NoSwitch);
			
			//First Swing
			
			CRCB EEF 1 
			{
				A_Saw("", "Crucible_Slice", 300, "CruciblePuff", SF_NOPULLIN | SF_NOTURN , 150, 32);
			}
			CRCB G 1
			{
				A_WeaponOffset(-40, 0, WOF_ADD);
				A_Saw("", "Crucible_Slice", 300, "CruciblePuff", SF_NOPULLIN | SF_NOTURN , 150, 32);
				A_SpawnItemEx("CrucibleBladeWave", 0, 0, Height / 2, 0, 0, 0, 0, SXF_CLIENTSIDE|SXF_TRANSFERPITCH);
			}
			
			TNT1 A 0 A_WeaponReady(WRF_NoFire|WRF_NoSwitch);
			
			CRCB HII 1 
			{
				A_WeaponOffset(-40, 8, WOF_ADD);
				A_Saw("", "Crucible_Slice", 300, "CruciblePuff", SF_NOPULLIN | SF_NOTURN , 150, 32);
			}
			CRCB D 0 A_WeaponOffset(325, 24, WOF_ADD);
			
			NULL A 10;
			
			TNT1 A 0
			{
				A_TakeInventory("DoGloryMelee",1);
			}
			
			CRCB D 1 A_WeaponOffset(-60, -12, WOF_ADD);
			CRCB D 1 A_WeaponOffset(-50, -10, WOF_ADD);
			CRCB D 1 A_WeaponOffset(-40, -8, WOF_ADD);
			CRCB D 1 A_WeaponOffset(-30, -6, WOF_ADD);
			CRCB D 1 A_WeaponOffset(-20, -4, WOF_ADD);
			
			CRCB D 1 bright A_WeaponOffset(-0.5, -4, WOF_ADD);
			CRCB DDD 1 bright A_WeaponOffset(-3, 6, WOF_ADD);
			CRCB D 3 bright A_WeaponOffset(2, -4, WOF_ADD);
			
			CRCB D 1 bright A_WeaponOffset(2, -4, WOF_ADD);
			
			CRCB JJCCBBAA 2 bright A_WeaponOffset(1, -2, WOF_ADD);
			CRCB A 1 A_StopSound(10);
			CRCB A 1 A_StartSound("Crucible_Deselect", CHAN_WEAPON, CHANF_OVERLAP);
			CRCB A 5;
			TNT1 A 1 A_Raise;
			Goto GoingToReady;
			
		/////////////////////////////////////////////////////////////////////////////////////////////
		// Shoulder Cannon
		////////////////////////////////////////////////////////////////////////////////////////////
			
		FireShoulderCannon:
			TNT1 A 0
			{	
				if(CountInv("FlameBelchSelected") > 0)
				{
					A_TakeInventory("Zoomed",1);
					A_ZoomFactor(1.0);
					A_TakeInventory("ADSmode",1);
					A_StopSound(CHAN_WEAPON);
					A_StopSound(CHAN_6);
					return ResolveState("FireFlameBelch");
				}
				if(CountInv("IceBombSelected") > 0)
				{
					A_TakeInventory("Zoomed",1);
					A_ZoomFactor(1.0);
					A_TakeInventory("ADSmode",1);
					A_StopSound(CHAN_WEAPON);
					A_StopSound(CHAN_6);
					return ResolveState("FireIceBomb");
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_StartSound("Equip_notready");
			TNT1 A 0 A_TakeInventory("DoShoulderCannon", 1);
			Goto GoingToReady;
			
		FireFlameBelch:
			TNT1 A 0
			{
				if (countinv("Gas") < 50)
				{
					return ResolveState("EmptyCannon");
				}
				A_TakeInventory("Zoomed",1);
				A_ZoomFactor(1.0);
				A_TakeInventory("ADSmode",1);
				return ResolveState(null);
			}
			SCL0 A 0 A_ClearOverlays(-5, 80);
			SCL0 A 0 A_GunFlash("Null");
			SCL0 ABCD 1 A_StartSound("Flamethrower/Charge",1);
			SCL0 EFGHIJ 1;
			SCL0 K 1 A_Quake(8, 8, 0, 32);
			TNT1 A 0 A_Recoil (4);
			TNT1 A 0 A_StartSound("Flamebelch", 1);
			SCF0 A 5 bright A_GunFlash;
			TNT1 A 0 A_AlertMonsters;
			TNT1 A 0 A_TakeInventory("Gas",50);
			SCF0 BCDBCDBCD 1 bright {
				A_FireProjectile("GloryFireMissile", -3, 0, Random(-20, -10), 12, FPF_NOAUTOAIM, -10);
			}
			SCF0 EF 1;
			SCL0 KJIHGFEDCBA 1;
			TNT1 A 0 A_TakeInventory("DoShoulderCannon", 1);
			TNT1 A 1 A_Raise;
			Goto GoingToReady;
			
		FireIceBomb:
			TNT1 A 0 {
				if (countinv("RocketAmmo") < 1)
				{
					return ResolveState("EmptyCannon");
				}
				A_TakeInventory("Zoomed",1);
				A_ZoomFactor(1.0);
				A_TakeInventory("ADSmode",1);
				return ResolveState(null);
			}
			SCL0 A 0 A_ClearOverlays(-5, 80);
			SCL0 A 0 A_GunFlash("Null");
			SCL0 ABCD 1 A_StartSound("Flamethrower/Charge",1);
			SCL0 EFGHIJ 1;
			SCL0 K 1 A_Quake(8, 8, 0, 32);
			TNT1 A 0 A_Recoil (4);
			SCF0 A 3 bright A_GunFlash;
			TNT1 A 0 A_AlertMonsters;
			TNT1 A 0 A_TakeInventory("RocketAmmo",1);
			SCF0 BC 1 bright;
			SCFG D 1 bright {
				A_StartSound ("weapons/firegrenade", CHAN_WEAPON);
				A_FireProjectile("SC_CryoGrenade", -1, 0, Random(-17, -13), 12, FPF_NOAUTOAIM, -10);
			}
			SCF0 EF 1;
			SCL0 KJIHGFEDCBA 1;
			TNT1 A 0 A_TakeInventory("DoShoulderCannon", 1);
			TNT1 A 1 A_Raise;
			Goto GoingToReady;
			
		EmptyCannon:
			TNT1 A 0 A_StopSound(CHAN_WEAPON);
			TNT1 A 0 A_StartSound("Equip_notready");
			TNT1 A 0 A_TakeInventory("DoShoulderCannon", 1);
			Goto GoingToReady;
			
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Glory Kill End
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	}
}

class PB_Weapon : PB_WeaponBase {} //This is just a dummy class for inheriting reasons

class PB_DualWeapon : PB_Weapon
{
	States
	{
	 ThrowMine:
	 ThrowGrenade:
		TNT1 A 0 {
			A_ZoomFactor(1.0);
			A_TakeInventory("ADSMode", 1);
			A_TakeInventory("DoGrenade", 1);
			A_TakeInventory("DoMine", 1);
			A_Print("You can't throw right now!");
		}
		Goto GoingToReady;
	}
}

class PB_UpgradeItem : CustomInventory
{
	Default
	{+DONTGIB;}
	action void A_SetSpawnSprite(String str)
	{
	   sprite = GetSpriteIndex(str);
	}
}
