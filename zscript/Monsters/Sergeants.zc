Class PB_ShotgunGuyGK : PB_ShotgunGuy Replaces PB_ShotgunGuy
{
	Default
	{
		WoundHealth 30;
	}
	States
	{
	Wound:
		"####" "#" 1
		{
			if(GetCvar("be_ExecutionsON"))
			{
				if(countinv("FinisherToken")==0) //if it isnt healing already
				{								//will heal and give the token that indicates it's executable
					A_SpawnItemEx("ZombieHighlight",0,0,0,0,0,0,0,SXF_SETMASTER|SXF_NOCHECKPOSITION); //to highlight if ON, and to remove the token after the monster heals
					A_GiveInventory("FinisherToken",1);	//token to allow melee attack to execute
				}
				
				if(GetCvar("be_MonsterStagger")==1) //will the monsters stagger at all?
				{
					return ResolveState("Stagger");	//stays there for a few seconds
				}
				else
				{
					return ResolveState(null);
				}
			}
			return ResolveState(null);
		}
		Goto See;
	Stagger:
		SPOS G 0
		{
			if(getcvar("be_ExecutionHighlight")==1)
			{	return ResolveState("PrepareStaggerHighlight");}
			else
			{	return ResolveState("StagLooper");	}
		}
		Goto StagLooper;
	PrepareStaggerHighlight:
		//RFTR X 0
		SPGS G 0;
		Goto StagLooper;
	
	StagLooper:
		"####" "#" 4
		{
			if(!countinv("FinisherToken"))
			{
				return ResolveState("See");
			}
			if(getcvar("be_NoisyStagger") && countinv("PainSoundToken"))
			{ 
				A_Pain(); 
				A_TakeInventory("PainSoundToken");
			}
			return ResolveState(null);
		}
		"####" "#" 0 { A_SpawnItem ("HeadshotTarget4", 0, 40,0); A_SpawnItem ("LegTarget4", 10); }
		"####" "#" 0;
		Loop;
	
	Death.GloryKill:
		TNT1 A 0 A_GiveToTarget("BPtoken",2);
		Goto Death.Fatality;
		
	Death.Crucible:
		TNT1 A 0 A_SpawnItemEx("GlorySawPinataLow",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		Goto Super::Death.cut;	
		
	Death.GloryFire:
		TNT1 A 0 A_SpawnItemEx("FlamePinataSpawn",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		Goto Super::Death.Flames;	
		
	Pain.GloryFire:
		TNT1 A 0 A_Jump(192, "See");
		TNT1 A 0 A_SpawnItemEx("FlamePinataSpawn",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		Goto See;	
		
	Death.BloodPunch:
		TNT1 A 0 A_GiveToTarget("BloodPunchKilled",1);
		TNT1 A 0	A_SpawnItemEx("BloodpunchWave", 0, 0, Height / 2, 0, 0, 0, 0, SXF_CLIENTSIDE|SXF_TRANSFERPITCH);
		TNT1 A 0	A_SpawnItemEx("BloodpunchWave", 0, 0, Height / 2, 0, 0, 0, 0, SXF_CLIENTSIDE|SXF_TRANSFERPITCH);
		TNT1 A 0	A_SpawnItemEx("BloodpunchWave", 0, 0, Height / 2, 0, 0, 0, 0, SXF_CLIENTSIDE|SXF_TRANSFERPITCH);
		TNT1 A 0	A_SpawnItemEx("BloodpunchWave", 0, 0, Height / 2, 0, 0, 0, 0, SXF_CLIENTSIDE|SXF_TRANSFERPITCH);
		TNT1 A 0 A_SpawnItemEx("GlorySawPinataLow",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		Goto Super::Death.ExtremePunches;
		
	Death.Fatality:
		TNT1 A 0 A_Pain();
		TNT1 A 0 A_NoBlocking();
		TNT1 A 0 A_SpawnItemEx("GloryLowPinataSpawn",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		TNT1 A 0 A_GiveToTarget("GoFatality", 1);
		TNT1 A 0 A_Jump(256,"Death.Fatality1", "Death.Fatality2", "Death.Fatality3", "Death.Fatality4", "Death.Fatality5", "Death.Fatality6");
		Goto Death.Fatality1;
		
	Execution:
		TNT1 A 1 A_Die("Execution");
		Stop;
	Death.Execution:
		TNT1 A 0 A_Stopsound();
		TNT1 A 0 A_GiveToTarget("BPtoken",2);
		TNT1 A 0 A_SpawnItemEx("GloryLowPinataSpawn",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		Stop;		
	}
}

Class PB_ShotgunGuyHelmetGK : PB_ShotgunGuyHelmet Replaces PB_ShotgunGuyHelmet
{
	Default
	{
		WoundHealth 30;
	}
	States
	{
	Wound:
		"####" "#" 1
		{
			if(GetCvar("be_ExecutionsON"))
			{
				if(countinv("FinisherToken")==0) //if it isnt healing already
				{								//will heal and give the token that indicates it's executable
					A_SpawnItemEx("ZombieHighlight",0,0,0,0,0,0,0,SXF_SETMASTER|SXF_NOCHECKPOSITION); //to highlight if ON, and to remove the token after the monster heals
					A_GiveInventory("FinisherToken",1);	//token to allow melee attack to execute
				}
				
				if(GetCvar("be_MonsterStagger")==1) //will the monsters stagger at all?
				{
					return ResolveState("Stagger");	//stays there for a few seconds
				}
				else
				{
					return ResolveState(null);
				}
			}
			return ResolveState(null);
		}
		Goto See;
	Stagger:
		SPV1 A 0
		{
			if(getcvar("be_ExecutionHighlight")==1)
			{	return ResolveState("PrepareStaggerHighlight");}
			else
			{	return ResolveState("StagLooper");	}
		}
		Goto StagLooper;
	PrepareStaggerHighlight:
		//RFTR X 0
		SPG1 A 6;
		Goto StagLooper;
	
	StagLooper:
		"####" "#" 4
		{
			if(!countinv("FinisherToken"))
			{
				return ResolveState("See");
			}
			if(getcvar("be_NoisyStagger") && countinv("PainSoundToken"))
			{ 
				A_Pain(); 
				A_TakeInventory("PainSoundToken");
			}
			return ResolveState(null);
		}
		"####" "#" 0 { A_SpawnItem ("HeadshotTarget4", 0, 40,0); A_SpawnItem ("LegTarget4", 10); }
		"####" "#" 0;
		Loop;
	
	Death.GloryKill:
		TNT1 A 0 A_GiveToTarget("BPtoken",2);
		Goto Death.Fatality;
		
	Death.Crucible:
		TNT1 A 0 A_SpawnItemEx("GlorySawPinataLow",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		Goto Super::Death.cut;	
		
	Death.GloryFire:
		TNT1 A 0 A_SpawnItemEx("FlamePinataSpawn",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		Goto Super::Death.Flames;		
	
	Pain.GloryFire:
		TNT1 A 0 A_Jump(192, "See");
		TNT1 A 0 A_SpawnItemEx("FlamePinataSpawn",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		Goto See;
	
	Death.BloodPunch:
		TNT1 A 0 A_GiveToTarget("BloodPunchKilled",1);
		TNT1 A 0	A_SpawnItemEx("BloodpunchWave", 0, 0, Height / 2, 0, 0, 0, 0, SXF_CLIENTSIDE|SXF_TRANSFERPITCH);
		TNT1 A 0	A_SpawnItemEx("BloodpunchWave", 0, 0, Height / 2, 0, 0, 0, 0, SXF_CLIENTSIDE|SXF_TRANSFERPITCH);
		TNT1 A 0	A_SpawnItemEx("BloodpunchWave", 0, 0, Height / 2, 0, 0, 0, 0, SXF_CLIENTSIDE|SXF_TRANSFERPITCH);
		TNT1 A 0	A_SpawnItemEx("BloodpunchWave", 0, 0, Height / 2, 0, 0, 0, 0, SXF_CLIENTSIDE|SXF_TRANSFERPITCH);
		TNT1 A 0 A_SpawnItemEx("GlorySawPinataLow",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		Goto Super::Death.ExtremePunches;
		
	Death.Fatality:
		TNT1 A 0 A_Pain();
		TNT1 A 0 A_NoBlocking();
		TNT1 A 0 A_SpawnItemEx("GloryLowPinataSpawn",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		TNT1 A 0 A_GiveToTarget("GoFatality", 1);
		TNT1 A 0 A_Jump(256,"Death.Fatality1", "Death.Fatality2", "Death.Fatality3");
		Goto Death.Fatality1;
		
	Execution:
		TNT1 A 1 A_Die("Execution");
		Stop;
	Death.Execution:
		TNT1 A 0 A_Stopsound();
		TNT1 A 0 A_GiveToTarget("BPtoken",2);
		TNT1 A 0 A_SpawnItemEx("GloryLowPinataSpawn",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		Stop;			
	}
}

Class PB_RiotShieldGuyGK : PB_RiotShieldGuy Replaces PB_RiotShieldGuy
{
	Default
	{
		WoundHealth 30;
	}
	States
	{
	Wound:
		"####" "#" 1
		{
			if(GetCvar("be_ExecutionsON"))
			{
				if(countinv("FinisherToken")==0) //if it isnt healing already
				{								//will heal and give the token that indicates it's executable
					A_SpawnItemEx("ZombieHighlight",0,0,0,0,0,0,0,SXF_SETMASTER|SXF_NOCHECKPOSITION); //to highlight if ON, and to remove the token after the monster heals
					A_GiveInventory("FinisherToken",1);	//token to allow melee attack to execute
				}
				
				if(GetCvar("be_MonsterStagger")==1) //will the monsters stagger at all?
				{
					return ResolveState("Stagger");	//stays there for a few seconds
				}
				else
				{
					return ResolveState(null);
				}
			}
			return ResolveState(null);
		}
		Goto See;
	Stagger:
		SPOS G 0
		{
			if(getcvar("be_ExecutionHighlight")==1)
			{	return ResolveState("PrepareStaggerHighlight");}
			else
			{	return ResolveState("StagLooper");	}
		}
		Goto StagLooper;
	PrepareStaggerHighlight:
		//RFTR X 0
		SPGS G 0;
		Goto StagLooper;
	
	StagLooper:
		"####" "#" 4
		{
			if(!countinv("FinisherToken"))
			{
				return ResolveState("See");
			}
			if(getcvar("be_NoisyStagger") && countinv("PainSoundToken"))
			{ 
				A_Pain(); 
				A_TakeInventory("PainSoundToken");
			}
			return ResolveState(null);
		}
		"####" "#" 0 { A_SpawnItem ("HeadshotTarget4", 0, 40,0); A_SpawnItem ("LegTarget4", 10); }
		"####" "#" 0;
		Loop;
	
	Death.GloryKill:
		TNT1 A 0 A_GiveToTarget("BPtoken",2);
		Goto Death.Fatality;
		
	Death.Crucible:
		TNT1 A 0 A_SpawnItemEx("GlorySawPinataLow",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		Goto Super::Death.cut;	
		
	Death.GloryFire:
		TNT1 A 0 A_SpawnItemEx("FlamePinataSpawn",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		Goto Super::Death.Flames;	
	
	Pain.GloryFire:
		TNT1 A 0 A_Jump(192, "See");
		TNT1 A 0 A_SpawnItemEx("FlamePinataSpawn",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		Goto See;
	
	Death.BloodPunch:
		TNT1 A 0 A_GiveToTarget("BloodPunchKilled",1);
		TNT1 A 0	A_SpawnItemEx("BloodpunchWave", 0, 0, Height / 2, 0, 0, 0, 0, SXF_CLIENTSIDE|SXF_TRANSFERPITCH);
		TNT1 A 0	A_SpawnItemEx("BloodpunchWave", 0, 0, Height / 2, 0, 0, 0, 0, SXF_CLIENTSIDE|SXF_TRANSFERPITCH);
		TNT1 A 0	A_SpawnItemEx("BloodpunchWave", 0, 0, Height / 2, 0, 0, 0, 0, SXF_CLIENTSIDE|SXF_TRANSFERPITCH);
		TNT1 A 0	A_SpawnItemEx("BloodpunchWave", 0, 0, Height / 2, 0, 0, 0, 0, SXF_CLIENTSIDE|SXF_TRANSFERPITCH);
		TNT1 A 0 A_SpawnItemEx("GlorySawPinataLow",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		Goto Super::Death.ExtremePunches;
		
	Death.Fatality:
		TNT1 A 0 A_Pain();
		TNT1 A 0 A_NoBlocking();
		TNT1 A 0 A_SpawnItemEx("GloryLowPinataSpawn",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		TNT1 A 0 A_GiveToTarget("GoFatality", 1);
		TNT1 A 0 A_Jump(256,"Death.Fatality1", "Death.Fatality2", "Death.Fatality3", "Death.Fatality4", "Death.Fatality5", "Death.Fatality6");
		Goto Death.Fatality1;
		
	Execution:
		TNT1 A 1 A_Die("Execution");
		Stop;
	Death.Execution:
		TNT1 A 0 A_Stopsound();
		TNT1 A 0 A_GiveToTarget("BPtoken",2);
		TNT1 A 0 A_SpawnItemEx("GloryLowPinataSpawn",0,0,Height / 2,random(0,8),0,random(0,8),random(0,360));
		Stop;			
	}
}